<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class PentestSession extends Model
{
    use HasFactory;

    protected $fillable = [
        'session_id',
        'batch_id',
        'selected_ips',
        'selected_modules',
        'status',
        'total_targets',
        'completed_targets',
        'description',
        'started_at',
        'completed_at'
    ];

    protected $casts = [
        'selected_ips' => 'array',
        'selected_modules' => 'array',
        'started_at' => 'datetime',
        'completed_at' => 'datetime'
    ];

    protected static function boot()
    {
        parent::boot();
        static::creating(function ($model) {
            if (empty($model->session_id)) {
                $model->session_id = Str::uuid();
            }
            if (empty($model->started_at)) {
                $model->started_at = now();
            }
        });
    }

    public function uploadBatch()
    {
        return $this->belongsTo(UploadBatch::class, 'batch_id', 'batch_id');
    }

    public function results()
    {
        return $this->hasMany(PentestResult::class, 'session_id', 'session_id');
    }

    public function credentials()
    {
        return $this->hasMany(DiscoveredCredential::class, 'session_id', 'session_id');
    }

    public function getProgressAttribute()
    {
        return $this->total_targets > 0 ? round(($this->completed_targets / $this->total_targets) * 100, 2) : 0;
    }

    public function getVulnerabilitiesCountAttribute()
    {
        return $this->results()->whereIn('status', ['vulnerable', 'success'])->count();
    }

    public function getCriticalVulnerabilitiesCountAttribute()
    {
        return $this->results()->where('severity', 'critical')->count();
    }
}
